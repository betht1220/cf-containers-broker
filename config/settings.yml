# This file should not be used in deployed environments. Instead, set
# the SETTINGS_PATH environment variable to point to a configuration
# file that contains these settings.

defaults: &defaults
  log_path: 'log/<%= Rails.env %>.log'
  auth_username: <%= ENV['BROKER_USERNAME'] || "containers" %>
  auth_password: <%= ENV['BROKER_PASSWORD'] || "secret" %>
  cookie_secret: <%= ENV['COOKIE_SECRET'] || 'e7247dae-a252-4393-afa3-2219c1c02efd' %>
  session_expiry: <%= ENV['SESSION_EXPIRY'] || 86400 %>

  # Restrict a maximum number of service instances/containers; 0 if unlimited
  max_containers: <%= ENV['MAX_CONTAINERS'] || 0 %>

  # IP/host used as 'host' for binding credentials
  external_ip: <%= ENV['EXTERNAL_IP'] || ENV['EXTERNAL_HOST'] || "127.0.0.1" %>

  # Dashboard URL hostname
  external_host: <%= ENV['EXTERNAL_HOST'] || "containers.vcap.me" %>
  # Dashboard URL protocol - if ssl_enabled then https:// else http://
  ssl_enabled: false

  cc_api_uri: 'http://api.vcap.me'
  skip_ssl_validation: true

  # Root folder on host machine for all container volumes
  host_directory: '/var/vcap/store/cf-containers-broker/'

  # Allocates ephemeral ports on host machine for each exposed port in Docker image
  allocate_docker_host_ports: true

  # If provisioning services with `allocate_docker_host_ports: true`
  # you can optionally enable the addition of a DOCKER_HOST_PORT_nnnn env var
  # for each exposed port.
  # This will create the container and then recreate the container with an additional
  # DOCKER_HOST_PORT_nnnn environment variable for each exposed port.
  # If you wish to disable this two-step provisioning process, set to true:
  enable_host_port_envvar: false

  # Ability to set environment variables to each container
  # File "/envdir/FOOBAR" will add an env var $FOOBAR to each Docker container,
  # set to the value from the file
  container_env_var_dir: '/envdir'

  services:
  - name: 'postgresql96'
    id: 'ef761cec-14f7-11e7-8dfb-bbab51a4e12a'
    description: 'PostgreSQL 9.6 service for application development and testing'
    bindable: true
    tags: [postgresql96, postgresql, sql, relational]
    metadata:
      displayName: 'PostgreSQL 9.6'
      longDescription: 'A PostgreSQL 9.6 service for development and testing running inside a Docker container'
      providerDisplayName: 'Cloud Foundry Community'
      documentationUrl: 'https://github.com/frodenas/docker-postgresql'
      supportUrl: 'https://slack.cloudfoundry.org'
    plans:
    - id: 'f30f03fa-14f7-11e7-8d86-cf0d7f2c3728'
      name: 'free'
      description: 'Free Trial'
      container:
        backend: 'docker'
        image: 'frodenas/postgresql'
        tag: '9.6'
        persistent_volumes: [/data]
      credentials:
        username: {key: 'POSTGRES_USERNAME'}
        password: {key: 'POSTGRES_PASSWORD'}
        dbname: {key: 'POSTGRES_DBNAME'}
        uri: {prefix: 'postgres'}
  - name: 'redis32'
    id: '0fdcc9c0-14f5-11e7-9d8c-cfde16aa4822'
    description: 'Redis 3.2 service for application development and testing'
    bindable: true
    tags: [redis32, redis, key-value]
    metadata:
      displayName: 'Redis 3.2'
      longDescription: 'A Redis 2.8 service for development and testing running inside a Docker container'
      providerDisplayName: 'Cloud Foundry Community'
      documentationUrl: 'https://github.com/frodenas/docker-redis'
      supportUrl: 'https://slack.cloudfoundry.org'
    plans:
    - id: '13d21792-14f5-11e7-81cd-4357fa4eeda9'
      name: 'free'
      description: 'Free Trial'
      container:
        backend: 'docker'
        image: 'frodenas/redis'
        tag: '3.2'
        persistent_volumes: [/data]
      credentials:
        password: {key: 'REDIS_PASSWORD'}

assets:
  <<: *defaults

development:
  <<: *defaults

test:
  <<: *defaults

production:
  <<: *defaults
